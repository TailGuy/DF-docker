# Generated at 2025-09-20 23:20:43
# Telegraf Configuration for OPC UA Monitoring
# Generated from CSV file

###############################################################################
#                            AGENT SETTINGS                                   #
###############################################################################
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = true

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read data from an OPC UA server
[[inputs.opcua]]
  ## OPC UA Server Endpoint URL.
  endpoint = "opc.tcp://100.94.111.58:4841" # Replace with your OPC UA Server URL

  ## Security policy: "None", "Basic128Rsa15", "Basic256", "Basic256Sha256".
  security_policy = "None"
  ## Security mode: "None", "Sign", "SignAndEncrypt".
  security_mode = "None"

  ## Path to certificate file (Required if SecurityMode != "None").
  certificate = ""
  ## Path to private key file (Required if SecurityMode != "None").
  private_key = ""

  ## Authentication method: "Anonymous", "UserName", "Certificate".
  auth_method = "Anonymous"
  # username = "" # Required if AuthMethod="UserName"
  # password = "" # Required if AuthMethod="UserName"

  ## Connection timeout for establishing the OPC UA connection.
  connect_timeout = "10s"
  ## Request timeout for individual OPC UA read requests.
  request_timeout = "5s"

  ## Node Configuration: Define the OPC UA nodes to read data from.
  [[inputs.opcua.nodes]]
    name = "PlantDemo_oEntryConveyor"
    namespace = "4"
    identifier_type = "s"
    identifier = '''|var|CODESYS Control Win V3 x64.Application.FIO.oEntryConveyor'''
  [[inputs.opcua.nodes]]
    name = "PlantDemo_iTankFlowMeter"
    namespace = "4"
    identifier_type = "s"
    identifier = '''|var|CODESYS Control Win V3 x64.Application.FIO.iTankFlowMeter'''
  [[inputs.opcua.nodes]]
    name = "PlantDemo_iTankLevelMeter"
    namespace = "4"
    identifier_type = "s"
    identifier = '''|var|CODESYS Control Win V3 x64.Application.FIO.iTankLevelMeter'''
  [[inputs.opcua.nodes]]
    name = "PlantDemo_iTankPanelSetpoint"
    namespace = "4"
    identifier_type = "s"
    identifier = '''|var|CODESYS Control Win V3 x64.Application.FIO.iTankPanelSetpoint'''
  [[inputs.opcua.nodes]]
    name = "PlantDemo_oTankFillValve"
    namespace = "4"
    identifier_type = "s"
    identifier = '''|var|CODESYS Control Win V3 x64.Application.FIO.oTankFillValve'''
  [[inputs.opcua.nodes]]
    name = "PlantDemo_oTankDischargeValve"
    namespace = "4"
    identifier_type = "s"
    identifier = '''|var|CODESYS Control Win V3 x64.Application.FIO.oTankDischargeValve'''
              
###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# --- InfluxDB v2 Output ---
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"] # Replace with your InfluxDB URL
  token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" # Replace with your InfluxDB Token or env var
  organization = "$DOCKER_INFLUXDB_INIT_ORG" # Replace with your InfluxDB Org or env var
  bucket = "OPC UA"

# --- MQTT Outputs: One per Node (Filtering on 'id' tag) ---
# MQTT Output for Node: |var|CODESYS Control Win V3 x64.Application.FIO.oEntryConveyor
[[outputs.mqtt]]
  servers = ["tcp://mosquitto:1883"]
  topic = "telegraf/opcua/PlantDemo_oEntryConveyor"
  tagpass = { id = ["ns=4;s=|var|CODESYS Control Win V3 x64.Application.FIO.oEntryConveyor"] }
  qos = 0
  retain = false
  data_format = "template"
  template = "{{ .Field \"PlantDemo_oEntryConveyor\" }}"
# MQTT Output for Node: |var|CODESYS Control Win V3 x64.Application.FIO.iTankFlowMeter
[[outputs.mqtt]]
  servers = ["tcp://mosquitto:1883"]
  topic = "telegraf/opcua/PlantDemo_iTankFlowMeter"
  tagpass = { id = ["ns=4;s=|var|CODESYS Control Win V3 x64.Application.FIO.iTankFlowMeter"] }
  qos = 0
  retain = false
  data_format = "template"
  template = "{{ .Field \"PlantDemo_iTankFlowMeter\" }}"
# MQTT Output for Node: |var|CODESYS Control Win V3 x64.Application.FIO.iTankLevelMeter
[[outputs.mqtt]]
  servers = ["tcp://mosquitto:1883"]
  topic = "telegraf/opcua/PlantDemo_iTankLevelMeter"
  tagpass = { id = ["ns=4;s=|var|CODESYS Control Win V3 x64.Application.FIO.iTankLevelMeter"] }
  qos = 0
  retain = false
  data_format = "template"
  template = "{{ .Field \"PlantDemo_iTankLevelMeter\" }}"
# MQTT Output for Node: |var|CODESYS Control Win V3 x64.Application.FIO.iTankPanelSetpoint
[[outputs.mqtt]]
  servers = ["tcp://mosquitto:1883"]
  topic = "telegraf/opcua/PlantDemo_iTankPanelSetpoint"
  tagpass = { id = ["ns=4;s=|var|CODESYS Control Win V3 x64.Application.FIO.iTankPanelSetpoint"] }
  qos = 0
  retain = false
  data_format = "template"
  template = "{{ .Field \"PlantDemo_iTankPanelSetpoint\" }}"
# MQTT Output for Node: |var|CODESYS Control Win V3 x64.Application.FIO.oTankFillValve
[[outputs.mqtt]]
  servers = ["tcp://mosquitto:1883"]
  topic = "telegraf/opcua/PlantDemo_oTankFillValve"
  tagpass = { id = ["ns=4;s=|var|CODESYS Control Win V3 x64.Application.FIO.oTankFillValve"] }
  qos = 0
  retain = false
  data_format = "template"
  template = "{{ .Field \"PlantDemo_oTankFillValve\" }}"
# MQTT Output for Node: |var|CODESYS Control Win V3 x64.Application.FIO.oTankDischargeValve
[[outputs.mqtt]]
  servers = ["tcp://mosquitto:1883"]
  topic = "telegraf/opcua/PlantDemo_oTankDischargeValve"
  tagpass = { id = ["ns=4;s=|var|CODESYS Control Win V3 x64.Application.FIO.oTankDischargeValve"] }
  qos = 0
  retain = false
  data_format = "template"
  template = "{{ .Field \"PlantDemo_oTankDischargeValve\" }}"
