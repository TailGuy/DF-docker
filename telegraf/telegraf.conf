# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
  # debug = false # Uncomment for verbose logging during troubleshooting
  # quiet = false

#==============================================================================
# INPUT PLUGIN: MQTT Consumer
#==============================================================================
[[inputs.mqtt_consumer]]
  ## MQTT Broker URLs.
  ## VERIFY THIS ADDRESS IS CORRECT for where Telegraf is running.
  ## 'host.docker.internal' only works if Telegraf is in a Docker container
  ## on Docker Desktop (Win/Mac) or specially configured Linux Docker.
  ## If Telegraf runs on the host, use 'localhost' or the broker's IP.
  servers = ["tcp://host.docker.internal:1883"] # Example: ["tcp://127.0.0.1:1883"]

  ## Topics to subscribe to.
  topics = [
    "alerts/#",
  ]

  ## Data format specification
  data_format = "json"

  ## --- ADDED/MODIFIED FOR FLUX QUERY ---
  ## Store the MQTT topic as a tag named 'topic'.
  topic_tag = "topic"

  ## --- END ADDED/MODIFIED ---

  ## Specify which JSON keys should become InfluxDB tags.
  tags = ["device", "severity"]

  ## Specify which JSON keys should become InfluxDB string fields.
  json_string_fields = ["message"]

  ## Define the measurement name directly.
  name_override = "mqtt_alerts"

  # Optional MQTT Settings (uncomment and configure if needed)
  # username = "your_mqtt_user"
  # password = "your_mqtt_password"
  # client_id = "telegraf_mqtt_alerts"
  # qos = 0
  # persistent_session = false

#==============================================================================
# PROCESSOR PLUGIN: Override (for Severity -> Level Mapping)
#==============================================================================

# Apply these processors only to the mqtt_alerts measurement
# NOTE: Processors run *after* the input plugin and *before* the output plugin.

# Rule 1: If severity is 'warning', add tag 'level=warn'
[[processors.override]]
  namepass = ["mqtt_alerts"] # Only process metrics named 'mqtt_alerts'
  [processors.override.tagpass]
    severity = ["warning"] # Only apply if 'severity' tag is 'warning'
  [processors.override.tags]
    level = "warn" # Add/overwrite the 'level' tag

# Rule 2: If severity is 'critical', add tag 'level=error'
[[processors.override]]
  namepass = ["mqtt_alerts"]
  [processors.override.tagpass]
    severity = ["critical"]
  [processors.override.tags]
    level = "error"

# Rule 3: If severity is 'error', add tag 'level=error' (matches Flux logic)
[[processors.override]]
  namepass = ["mqtt_alerts"]
  [processors.override.tagpass]
    severity = ["error"]
  [processors.override.tags]
    level = "error"

# Rule 4: If severity is 'info', add tag 'level=info' (matches Flux logic)
[[processors.override]]
  namepass = ["mqtt_alerts"]
  [processors.override.tagpass]
    severity = ["info"]
  [processors.override.tags]
    level = "info"

#==============================================================================
# OUTPUT PLUGIN: InfluxDB v2
#==============================================================================
[[outputs.influxdb_v2]]
  ## URLs of your InfluxDB instance.
  urls = ["http://64.226.126.250:8086"] # Your specific InfluxDB URL

  ## Token for authentication. Consider using an environment variable $INFLUX_TOKEN instead
  token = "698a2160b9042affd148c49e7aa81f389b437c1e49865d736ab33ce538d5ff65"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "DataForge"

  ## Destination bucket to write into. Matches your Flux query.
  bucket = "Alerts"

  # Optional settings (timeouts, proxy, TLS, etc.) - uncomment/configure if needed
  # timeout = "5s"
  # content_encoding = "gzip"
  # influx_uint_support = false
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  # insecure_skip_verify = false